class Solution {
public:
    int trap(vector<int>& height) {
        int size = height.size();
        int left[size];
        left[0]=height[0];
        for(int i=1; i<size; i++){
             if(height[i] > left[i-1])
                left[i]=height[i];
            else
                left [i]=left[i-1];
        }
        int right[size];
        right[size-1]=height[size-1];
        for(int i=size-2; i>=0; i--){
             if(height[i]>right[i+1])
                 right[i] = height[i];
             else
                 right[i]=right[i+1];
        }
        int sum=0;
        for(int i=0; i<size; i++){
            sum +=min(left[i],right[i])-height[i];
        }
        return sum;
    }
};

**************************  MY METHOD   *******************************

class Solution {
public:
    int trap(vector<int>& h) {
        int left = 0;
        int right = h.size() - 1;
        int left_max = 0;
        int right_max = 0;
        int trap = 0;
        if (h.empty()) 
            return 0;
        while (left <= right) {
            if (h[left] < h[right]) {
                if (h[left] >= left_max) {
                    left_max = h[left];
                } else {
                     trap += left_max - h[left];
                }
                left++;
            } else {
                if (h[right] >= right_max) {
                    right_max = h[right];
                } else {
                    trap += right_max - h[right];
                }
                right--;
            }
        }
        
        return trap;
    }
};
