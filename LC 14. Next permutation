* My Approach :- 
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int pivot = -1;
  
       
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                pivot = i;
                break;
            }
        }

        if (pivot == -1) {
           
            reverse(nums.begin(), nums.end());
        } else {
           
            for (int i = n - 1; i > pivot; i--) {
                if (nums[i] > nums[pivot]) {
                    swap(nums[i], nums[pivot]);
                    break;
                }
            }
          
            reverse(nums.begin() + pivot + 1, nums.end());
        }
    
    }
};

* College solution :- 
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int index1=-1;
        for(int i=nums.size()-1; i>0; i--){
            if(nums[i-1]<nums[i]){
                index1= i;
                break;
            }
        }
        if(index1 == -1)
          reverse(nums.begin(), nums.end());
          else{
            int index2=-1;
            for(int i=nums.size()-1; i>=index1; i--){
                if(nums[i]>nums[index1-1]){
                    index2 = i;
                    break;
                }
            }
            swap(nums[index1-1],nums[index2]);
            reverse(nums.begin()+index1,nums.end());
          }
    }
};
